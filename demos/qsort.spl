/* tests a append-free quicksort routine */

[Int] qsort([Int] lst, [Int] suffix)
{
    if(isEmpty(lst))
	return suffix;

    Int pivot = hd(lst);
    [Int] rest = tl(lst);
    [Int] lhs = [];
    [Int] rhs = [];

    while(!isEmpty(rest)) {
	Int cur = hd(rest);
	rest = tl(rest);
	if(cur <= pivot)
	    lhs = cur : lhs;
	else
	    rhs = cur : rhs;
    }

    return qsort(lhs, pivot:qsort(rhs, suffix));
}

[t] add([t] xs, [t] ys)
{
    while(!isEmpty(ys)) {
	xs = hd(ys) : xs;
	ys = tl(ys);
    }
    return xs;
}

[[u]] perms([u] src)
{
    if(isEmpty(src))
	return []:[];

    u x = hd(src);

    [[u]] xxs = perms(tl(src));
    [[u]] out = [];

    while(!isEmpty(xxs)) {
	[u] cur = hd(xxs);
	xxs = tl(xxs);
	[u] build = [];
	while(!isEmpty(cur)) {
	    out = add(cur, x:build): out;
	    build = hd(cur) : build;
	    cur = tl(cur);
	}
	out = add(cur, x:build): out;
    }
    return out;
}

[Int] range(Int k, Int l) 
{
    if(l < k) return [];
    return k : range(k+1, l);
}

Int compact([Int] lst)
{
    Int x = 0;
    while(!isEmpty(lst)) {
	x = x*10 + hd(lst);
	lst = tl(lst);
    }
    return x;
}

Bool isSorted([Int] lst)
{
    while(!isEmpty(lst) && !isEmpty(tl(lst))) {
	if(hd(lst) > hd(tl(lst))) 
	    return False;
	lst = tl(lst);
    }
    return True;
}

Void main()
{
    [[Int]] p = perms(range(1,7));
    while(!isEmpty(p)) {
	print(compact(qsort(hd(p),[])));
	if(!isSorted(qsort(hd(p),[])))
	    print(-1);
	p = tl(p);
    }
}

