/* Typing stress test 
  -- a.k.a.  playing around with cyclic and inconsistent types.

  all the small building blocks are given conservative implementations which 
  should definately pass any compiler.
 */

// diagonalisation
(u,u) d(u x) 
    { return (x,x); }

([u],u) d1(u x)
    { return ([],x); }

// conjuration
u e0()
    { [u] ety = []; return hd(ety); }

(u,u) e() 
    { [u] ety = []; u x = hd(ety); return (x,x); }

([u],u) e2()
    { [u] ety = []; u x = hd(ety); return ([], x); }

// recursion
u f((u,[u]) x)
    { return fst(x); }

u f1((u,(u,u)) x)
    { return fst(x); }

u f2((u,[(u,u)]) x)
    { return fst (x); }
u f3((u,[(Int,u)]) x)
    { return fst (x); }
u f4(([u],[(u,u)]) x)
    { return hd(fst(x)); }

// abjuration
u g(([u],(u,u)) x)
    { return hd(fst(x)); }

// enchanting
u h((u,u) x)
    { return fst(x); }
u h1((u,Int) x)
    { return fst(x); }
u h2((u,v) x)
    { return fst(x); }

// misdirection
[u] l(u x) 
    { return x:[]; }

[u] n()
    { return []; }

Void accept(u x) 
    { u y = x; }

Void main()
{
    // without type chaining:
    // cannot unify types: `((v7,v7),(v7,v7))' found but `(v7,(v7,v7))' expected
    // with type chaining:
    // attempt to instantiate cyclic type u = (u,u
    accept( f1(e()) );
}

